"""Change name of users_groups to members

Revision ID: c682a2ce92c7
Revises: 9f71141d96c1
Create Date: 2022-09-11 16:49:09.517972

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c682a2ce92c7'
down_revision = '9f71141d96c1'
branch_labels = None
depends_on = None

app_schema = 'flaskapp'

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('members',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], [f'{app_schema}.groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], [f'{app_schema}.users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'group_id'),
    schema=app_schema
    )
    op.drop_table('users_groups', schema=app_schema)
    op.alter_column('groups', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False,
               schema=app_schema)
    op.alter_column('maintainers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False,
               schema=app_schema)
    op.alter_column('owners', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False,
               schema=app_schema)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False,
               schema=app_schema)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               schema=app_schema)
    op.alter_column('owners', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               schema=app_schema)
    op.alter_column('maintainers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               schema=app_schema)
    op.alter_column('groups', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               schema=app_schema)
    op.create_table('users_groups',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], [f'{app_schema}.groups.id'], name='users_groups_group_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], [f'{app_schema}.users.id'], name='users_groups_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'group_id', name='users_groups_pkey'),
    schema=app_schema
    )
    op.drop_table('members', schema=app_schema)
    # ### end Alembic commands ###
